'use client'; // This marks the file as a client-side component

import { useState } from 'react';
import Layout from '../components/layout';
import scanVulnerabilities from '../utils/vulnerabilityScanner';

// Define the type for scan results
interface ScanResults {
  openPorts: number[];
  missingHeaders: string[];
}

const VulnerabilityScanner = () => {
  const [target, setTarget] = useState('');
  const [ports, setPorts] = useState('');
  const [scanResults, setScanResults] = useState<ScanResults | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    const portList = ports.split(',').map((port) => parseInt(port.trim())).filter(Boolean);
    const result = await scanVulnerabilities(target, portList);
    setScanResults(result);
    setIsLoading(false);
  };

  return (
    <Layout>
      <h2 className="text-2xl font-bold mb-4">Vulnerability Scanner</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="target" className="block font-semibold">Target</label>
          <input
            type="text"
            id="target"
            value={target}
            onChange={(e) => setTarget(e.target.value)}
            className="border px-4 py-2 w-full"
            required
          />
        </div>
        <div>
          <label htmlFor="ports" className="block font-semibold">Ports (comma-separated)</label>
          <input
            type="text"
            id="ports"
            value={ports}
            onChange={(e) => setPorts(e.target.value)}
            className="border px-4 py-2 w-full"
            required
          />
        </div>
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          disabled={isLoading}
        >
          {isLoading ? 'Scanning...' : 'Scan Target'}
        </button>
      </form>

      {scanResults && (
        <div className="mt-6">
          <h3 className="font-bold">Scan Results:</h3>
          <div>
            <h4 className="font-semibold">Open Ports:</h4>
            <p>{scanResults.openPorts.length > 0 ? scanResults.openPorts.join(', ') : 'No open ports found'}</p>
          </div>
          <div>
            <h4 className="font-semibold">Missing Headers:</h4>
            <p>{scanResults.missingHeaders.length > 0 ? scanResults.missingHeaders.join(', ') : 'No missing headers found'}</p>
          </div>
        </div>
      )}
    </Layout>
  );
};

export default VulnerabilityScanner;

